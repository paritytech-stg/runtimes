name: Bench

on:
  issue_comment: # listen for comments on issues
    types: [created]
    if: startsWith(github.event.comment.body, '/cmd')

permissions: # allow the action to comment on the PR
  contents: write
  issues: write
  pull-requests: write

jobs:
  bench:
    runs-on: arc-runners-beefy-stg
    steps:
      - name: Install updates and protobuf-compiler
        run: | 
          sudo apt update && sudo apt install --assume-yes \
            pkg-config g++ make cmake protobuf-compiler curl libssl-dev libclang-dev libudev-dev git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set rust version via common env file
        run: cat .github/env >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "wasm32-unknown-unknown"
          components: "rust-src rustfmt clippy"
          toolchain: "nightly-${{env.RUST_NIGHTLY_VERSION}}"


      - name: Install dependencies
        run: cargo install subweight frame-omni-bencher

      - name: Setup Cache
        uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43 # v2.7.0
        with:
          shared-key: "fellowship-cmd"

      - name: Generate a token
        id: commands_token
        uses: actions/create-github-app-token@v1.8.1
        with:
          app-id: ${{ secrets.COMMAND_APP_ID }}
          private-key: ${{ secrets.COMMAND_APP_KEY }}

      - name: Get PR comment
        uses: actions-ecosystem/action-regex-match@v2
        id: get-pr-comment
        with:
          text: ${{ github.event.comment.body }}
          regex: '^(\/cmd )(.*)$'

      - name: Run cmd
        id: bench
        env:
          CMD: ${{ steps.get-pr-comment.outputs.group2 }} # to avoid "" around the command
        run: |
          echo "Running command: $CMD"
          git remote -v
          python3 .github/scripts/cmd/cmd.py $CMD
          git status
          git diff

      - name: Comment PR (End)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.commands_token.outputs.token }}
  #        github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Benchmark finished! Output: [Link to pipeline](${context.runId})`
            })

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git pull origin ${{ github.head_ref }}
          git add .
          git commit -m "Update from benchmark"
          git push origin ${{ github.head_ref }}
          
